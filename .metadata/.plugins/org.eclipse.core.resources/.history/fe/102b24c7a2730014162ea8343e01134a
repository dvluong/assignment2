package edu.csupomona.cs.cs356.assignment_2;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;

public class User extends Observable implements Component, Observer {

	String user;
	List<User> followers = new ArrayList<User>();
	List<User> following = new ArrayList<User>();
	List<String> tweet = new ArrayList<String>();

	private static final User instance = new User();

	public User() {

	}

	public static User getInstance() {
		return instance;
	}

	public User(String newUser) {
		user = newUser;
	}

	public String getUser() {
		return user;
	}

	public String toString() {
		return user;
	}

	public void addFollower(User user) {
		followers.add(user);
	}

	public void followUser(User userId) {
		User userToFollow = userId;
		this.following.add(userToFollow);
		setChanged();
		notifyObservers(userToFollow);
		clearChanged();
		// addFollower(userToFollow);
	}

	public void sendTweet(String tweets) {
		tweet.add(tweets);
		setChanged();
		notifyObservers(tweets);
		clearChanged();
	}

	public void update(User user, String follower, String tweets, UserManager UM) {
		
		for (int a = 0; a < UM.uiMap.size(); a++) {
			if (UM.getKeysArrayUI(follower)) {
				if(UM.getUI(follower).listT == null){
					UM.getUI(follower).listT = new DefaultListModel<String>();
					UM.getUI(user.getUser()).listT = new DefaultListModel<String>();
//					UM.getUI(user.getUser()).listT.addElement("News Feed");
//					UM.getUI(follower).listT.addElement("News Feed: ");
				}
				if (UM.getUI(follower).listTweets == null){
					UM.getUI(user.getUser()).listTweets = new JList<String>(UM.getUI(user.getUser()).listT);
					UM.getUI(follower).listTweets = new JList<String>(UM.getUI(follower).listT);
				}
				if (UM.getUI(follower).frame == null){
					UM.getUI(follower).frame = new JFrame(follower);
					UM.getUI(user.getUser()).frame = new JFrame(user.getUser());
				}
				UM.getUI(follower).listT.addElement(user + " tweeted: " + tweets);
				UM.getUI(user.getUser()).listT.addElement(user + " tweeted: " + tweets);
				UM.getUI(follower).listTweets = new JList<String>(UM.getUI(follower).listT);
				UM.getUI(user.getUser()).listTweets = new JList<String>(UM.getUI(user.getUser()).listT);
				UM.getUI(follower).listTweets.setModel(UM.getUI(follower).listT);
				UM.getUI(user.getUser()).listTweets.setModel(UM.getUI(user.getUser()).listT);
				UM.getUI(follower).frame.revalidate();
				UM.getUI(user.getUser()).frame.revalidate();
				UM.getUI(follower).frame.repaint();
				UM.getUI(user.getUser()).frame.repaint();
//				ui.listT.addElement(user + " tweeted: " + tweets);
//				ui.listTweets = new JList<String>(listT);
//				ui.listTweets.setModel(listT);
//				ui.frame.revalidate();
//				ui.frame.repaint();
				//System.out.println(user + " tweeted: " + tweets);
				System.out.println("this was called");
			}

		}

	}

	public void accept(Visitor visitor) {
		visitor.visitUser();
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		if (arg1 instanceof String && arg0 instanceof User) {
			String resp = (String) arg1;
			System.out.println((User) arg0 + " tweeted: " + resp);
		}
		if (arg0 instanceof User && arg1 instanceof User) {
			System.out.println((User) arg0 + " followed " + arg1);
		}
	}
}