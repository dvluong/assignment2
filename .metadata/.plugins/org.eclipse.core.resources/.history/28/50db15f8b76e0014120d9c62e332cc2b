package edu.csupomona.cs.cs356.assignment_2;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Graphics;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.UIManager;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

import java.awt.Color;
import java.io.IOException;

import javax.swing.JTextArea;

import java.awt.Toolkit;
import java.awt.SystemColor;

import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;

@SuppressWarnings("serial")
public class AdminCP extends DefaultTreeCellRenderer{

	private JFrame frame;
	private String storeGroup;
	private String storeUser;
	private JButton btnAddGroup;
	private static final AdminCP instance = new AdminCP();
	protected String userID;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) throws IOException {

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					AdminCP window = new AdminCP();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public AdminCP() {
		initialize();
	}
	public static AdminCP getInstance(){
		return instance;
	}
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame("AdminControlPanel");
		frame.setIconImage(Toolkit.getDefaultToolkit().getImage(
				AdminCP.class.getResource("/image/naruto.jpg")));
		frame.getContentPane().setBackground(new Color(204, 102, 204));
		frame.setBackground(Color.CYAN);
		frame.setBounds(100, 100, 975, 599);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		UIManager.put("Tree.rendererFillBackground", false);

		JTextArea textAddGroup = new JTextArea();
		textAddGroup.setBackground(Color.LIGHT_GRAY);
		textAddGroup.setBounds(750, 58, 132, 22);
		frame.getContentPane().add(textAddGroup);

		btnAddGroup = new JButton("Add Group") {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};

		btnAddGroup.setForeground(Color.BLACK);
		btnAddGroup.setContentAreaFilled(false);
		btnAddGroup.setBackground(new Color(200, 100, 200, 200));
		btnAddGroup.setBounds(584, 50, 156, 39);
		frame.getContentPane().add(btnAddGroup);

		JTextArea textAddUser = new JTextArea();
		textAddUser.setBackground(Color.LIGHT_GRAY);
		textAddUser.setBounds(750, 22, 132, 22);
		frame.getContentPane().add(textAddUser);

		JButton btnAddUser = new JButton("Add User") {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};
		btnAddUser.setForeground(Color.BLACK);
		btnAddUser.setContentAreaFilled(false);
		btnAddUser.setBackground(new Color(200, 100, 200, 200));
		btnAddUser.setBounds(584, 11, 156, 39);
		frame.getContentPane().add(btnAddUser);
	
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Root");
		DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
		JTree tree = new JTree(treeModel) {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};
		GroupComposite group = new GroupComposite("Root");
		group.add(group);
		tree.setCellRenderer(new DefaultTreeCellRenderer() {
            private Icon closedIcon = UIManager.getIcon("Tree.closedIcon");
            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value,
                boolean sel, boolean exp, boolean leaf, int row, boolean hasFocus) {
                DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) value;
                String s = rootNode.getUserObject().toString();
                Component c = super.getTreeCellRendererComponent(
                    tree, value, sel, exp, leaf, row, hasFocus);                
                if ("Root".equals(s))              
                    setIcon(closedIcon);                       
                return c;
            }
        });
		
		tree.setRootVisible(true);
		tree.setForeground(SystemColor.activeCaptionText);
		tree.setOpaque(false);
		tree.setBackground(new Color(200, 100, 200, 200));
		tree.setModel(treeModel); {
			{
				btnAddUser.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						
						DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
						DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
						DefaultMutableTreeNode newNode = new DefaultMutableTreeNode (textAddUser.getText());
						
						if (selectedNode != null && !rootNode.breadthFirstEnumeration().equals(textAddUser.getText())) {
							if (e.getSource() == btnAddUser && !textAddUser.getText().trim().equals("")) {
								storeUser = textAddUser.getText();
								UserComposite.getInstance().add(storeUser);
								tree.setCellRenderer(new DefaultTreeCellRenderer() {
						            private Icon leafIcon = UIManager.getIcon("Tree.leafIcon");								        
						            @Override
						            public Component getTreeCellRendererComponent(JTree tree, Object value,
						                    boolean sel, boolean exp, boolean leaf, int row, boolean hasFocus) {
						                    DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) value;
						                    String s = rootNode.getUserObject().toString();
						                    Component c = super.getTreeCellRendererComponent(
						                        tree, value, sel, exp, leaf, row, hasFocus);                
						                    if (storeUser.equals(s))              
						                        setIcon(leafIcon);                       
						                    return c;
						                }
						        });
								model.insertNodeInto(newNode, selectedNode, selectedNode.getChildCount());
							
								model.reload();
								JOptionPane.showMessageDialog(null, "Added User: " + storeUser);
							} else {
								JOptionPane.showMessageDialog(null, "Please enter a User Name.");
							}
						}else {
							JOptionPane.showMessageDialog(null, "Please select a folder to add to.");
						}
					}
				});
				btnAddGroup.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
						DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
						DefaultMutableTreeNode newNode = new DefaultMutableTreeNode (textAddGroup.getText());
						
						if (selectedNode != null) {
							if (e.getSource() == btnAddGroup && !textAddGroup.getText().trim().equals("")) {
								storeGroup = textAddGroup.getText();
								group.add(new GroupComposite(storeGroup));
								
								tree.setCellRenderer(new DefaultTreeCellRenderer() {
						            private Icon closedIcon = UIManager.getIcon("Tree.closedIcon");						            
						            @Override
						            public Component getTreeCellRendererComponent(JTree tree, Object value,
						                    boolean sel, boolean exp, boolean leaf, int row, boolean hasFocus) {
						                    DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) value;
						                    String s = rootNode.getUserObject().toString();
						                    Component c = super.getTreeCellRendererComponent(
						                        tree, value, sel, exp, leaf, row, hasFocus);                
						                    if (storeGroup.equals(s))              
						                        setIcon(closedIcon);                       
						                    return c;
						                }
						        });
								model.insertNodeInto(newNode, selectedNode, selectedNode.getChildCount());
								model.reload();
								group.print();
								JOptionPane.showMessageDialog(null, "Added Group: " + storeGroup);
							} else {
								JOptionPane.showMessageDialog(null, "Please enter a Group Name.");
							}
						} else {
							JOptionPane.showMessageDialog(null, "Please select a folder to add to.");
						}
					}

				});
			}

		};
		tree.setBounds(9, 9, 251, 532);
		frame.getContentPane().add(tree);
		JButton btnOpenUserView = new JButton("Open User View") {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};
		btnOpenUserView.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
						
				if (selectedNode != null){
					
					UI.getInstance().run();
					
					//Object nodeInfo = selectedNode.getUserObject();
				} else {
					System.out.println("not working");
				}
						 
			}
		});
		
		
		btnOpenUserView.setForeground(Color.BLACK);
		btnOpenUserView.setContentAreaFilled(false);
		btnOpenUserView.setBackground(new Color(200, 100, 200, 200));
		btnOpenUserView.setBounds(271, 95, 313, 39);
		frame.getContentPane().add(btnOpenUserView);

		JButton btnUserTotal = new JButton("User Total") {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};
		btnUserTotal.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnUserTotal.setForeground(Color.BLACK);
		btnUserTotal.setContentAreaFilled(false);
		btnUserTotal.setBackground(new Color(200, 100, 200, 200));
		btnUserTotal.setBounds(270, 302, 156, 39);
		frame.getContentPane().add(btnUserTotal);

		JButton btnGroupTotal = new JButton("Group Total") {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};
		btnGroupTotal.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnGroupTotal.setForeground(Color.BLACK);
		btnGroupTotal.setContentAreaFilled(false);
		btnGroupTotal.setBackground(new Color(200, 100, 200, 200));
		btnGroupTotal.setBounds(428, 302, 156, 39);
		frame.getContentPane().add(btnGroupTotal);
		JButton btnTotalMsgs = new JButton("Total Messages") {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};
		btnTotalMsgs.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		btnTotalMsgs.setForeground(Color.BLACK);
		btnTotalMsgs.setContentAreaFilled(false);
		btnTotalMsgs.setBackground(new Color(200, 100, 200, 200));
		btnTotalMsgs.setBounds(270, 342, 156, 39);
		frame.getContentPane().add(btnTotalMsgs);

		JButton btnPositivePercentage = new JButton("Positive \rPercentage") {
			@Override
			protected void paintComponent(Graphics g) {
				if (!isOpaque() && getBackground().getAlpha() < 255) {
					g.setColor(getBackground());
					g.fillRect(0, 0, getWidth(), getHeight());
				}
				super.paintComponent(g);
			}
		};
		btnPositivePercentage.setForeground(Color.BLACK);
		btnPositivePercentage.setContentAreaFilled(false);
		btnPositivePercentage.setBackground(new Color(200, 100, 200, 200));
		btnPositivePercentage.setBounds(428, 342, 156, 39);
		frame.getContentPane().add(btnPositivePercentage);
		JLabel label = new JLabel("");
		label.setIcon(new ImageIcon(AdminCP.class.getResource("/image/jibril3.jpg")));
		label.setBounds(0, -31, 965, 632);
		frame.getContentPane().add(label);
	}
	
}
